<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NothingToSay0031</title>
    <link>https://nothingtosay0031.github.io/</link>
    <description>Recent content on NothingToSay0031</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Apr 2025 17:23:03 +0000</lastBuildDate>
    <atom:link href="https://nothingtosay0031.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReSTIR - Path Reuse in Real-time</title>
      <link>https://nothingtosay0031.github.io/post/restir/</link>
      <pubDate>Mon, 21 Apr 2025 17:23:03 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/restir/</guid>
      <description>&lt;h1 id=&#34;restir&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#restir&#34;&gt;&lt;/a&gt;&#xD;&#xA;ReSTIR&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://intro-to-restir.cwyman.org/&#34;&gt;A Gentle Introduction to ReSTIR: Path Reuse in Real-time&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;resampled-importance-sampling-ris&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#resampled-importance-sampling-ris&#34;&gt;&lt;/a&gt;&#xD;&#xA;Resampled Importance Sampling (RIS)&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;proof-that-w_x-is-an-unbiased-contribution-weight&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#proof-that-w_x-is-an-unbiased-contribution-weight&#34;&gt;&lt;/a&gt;&#xD;&#xA;Proof that $W_X$ is an Unbiased Contribution Weight&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://intro-to-restir.cwyman.org/presentations/2023ReSTIR_Course_Notes.pdf&#34;&gt;Course Notes&lt;/a&gt; Equation 3.1 Proof&lt;/p&gt;&#xA;&lt;p&gt;Let $X, X_1, \dots, X_M \sim p(x)$ be i.i.d. samples from a probability distribution $p$.&lt;br&gt;&#xA;We define:&lt;/p&gt;&#xA;$$&#xA;w_i = \frac{\hat{p}(X_i)}{p(X_i)}, \quad&#xA;W_X = \frac{1}{\hat{p}(X)} \cdot \left( \frac{1}{M} \sum_{i=1}^M w_i \right)&#xA;$$&lt;p&gt;Our goal is to show that if we choose $\hat{p}(x) = f(x)$, then $W_X$ is an &lt;strong&gt;unbiased contribution weight&lt;/strong&gt;, meaning it satisfies the following condition:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compression-Oriented Programming</title>
      <link>https://nothingtosay0031.github.io/post/compression/</link>
      <pubDate>Sat, 04 Jan 2025 22:47:09 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/post/compression/</guid>
      <description>&lt;h1 id=&#34;compression-oriented-programming-a-practical-approach-to-abstraction&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#compression-oriented-programming-a-practical-approach-to-abstraction&#34;&gt;&lt;/a&gt;&#xD;&#xA;Compression-Oriented Programming: A Practical Approach to Abstraction&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Casey Muratori&amp;rsquo;s blog post, &lt;a href=&#34;https://caseymuratori.com/blog_0015&#34;&gt;Semantic Compression&lt;/a&gt;, presents a compelling alternative to traditional object-oriented programming (OOP) practices. By optimizing the UI code for The Witness, the author demonstrates how step-by-step code compression can lead to improved readability, maintainability, and scalability. This article distills the core ideas and methodology outlined in the post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-concept-of-code-compression&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#the-concept-of-code-compression&#34;&gt;&lt;/a&gt;&#xD;&#xA;The Concept of Code Compression&#xD;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Code compression programming&lt;/strong&gt; refers to simplifying code to its minimal expression by extracting repetitive patterns, reducing redundancy, and increasing the level of abstraction.&lt;/li&gt;&#xA;&lt;li&gt;This approach &lt;strong&gt;starts with detailed optimization&lt;/strong&gt; and avoids relying on pre-planned architecture. Instead, &lt;strong&gt;the final system architecture emerges naturally&lt;/strong&gt; through iterative compression and optimization.&lt;/li&gt;&#xA;&lt;li&gt;Unlike the traditional top-down &amp;ldquo;design architecture first&amp;rdquo; approach in OOP, &lt;strong&gt;code compression minimizes the risk of overlooking details or creating suboptimal solutions&lt;/strong&gt; during architectural design.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;optimization-starting-from-details&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#optimization-starting-from-details&#34;&gt;&lt;/a&gt;&#xD;&#xA;Optimization Starting from Details&#xD;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;The author &lt;strong&gt;extracts patterns from repetitive code&lt;/strong&gt;, such as button calculation logic and row management in UI layouts.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Local variables are abstracted into shared structures&lt;/strong&gt; (e.g., &lt;code&gt;Panel_Layout&lt;/code&gt;) to enable data sharing and simplify logic.&lt;/li&gt;&#xA;&lt;li&gt;Each optimization step &lt;strong&gt;is intuitive and does not require complex tools&lt;/strong&gt; or workflows (e.g., UML diagrams or index cards).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-by-step-code-compression&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#step-by-step-code-compression&#34;&gt;&lt;/a&gt;&#xD;&#xA;Step-by-Step Code Compression&#xD;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Step 1: Establish a Shared Stack Framework&lt;/strong&gt;&lt;br&gt;&#xA;Extract variables related to panel layout (e.g., &lt;code&gt;row_height&lt;/code&gt; and &lt;code&gt;at_y&lt;/code&gt;) into the &lt;code&gt;Panel_Layout&lt;/code&gt; structure, &lt;strong&gt;acting as a shared state manager&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiple Importance Sampling and Next Event Estimation</title>
      <link>https://nothingtosay0031.github.io/post/mis_nee/</link>
      <pubDate>Fri, 03 Jan 2025 20:25:47 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/post/mis_nee/</guid>
      <description>&lt;h1 id=&#34;monte-carlo-integration-correctness-convergence-and-application-in-rendering-equation&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#monte-carlo-integration-correctness-convergence-and-application-in-rendering-equation&#34;&gt;&lt;/a&gt;&#xD;&#xA;Monte Carlo Integration: Correctness, Convergence, and Application in Rendering Equation&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;correctness-of-monte-carlo-integration&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#correctness-of-monte-carlo-integration&#34;&gt;&lt;/a&gt;&#xD;&#xA;Correctness of Monte Carlo Integration&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;Given a probability density function $p(x)$ over the interval $[a, b]$, we sample a dataset $\{X_1, X_2, \dots, X_N\}$.&lt;/p&gt;&#xA;&lt;p&gt;Define $F_N$:&lt;/p&gt;&#xA;$$F_N = \frac{1}{N} \sum_{i=1}^N \frac{f(X_i)}{p(X_i)}$$&lt;p&gt;&lt;strong&gt;Expected value of $F_N$:&lt;/strong&gt;&lt;/p&gt;&#xA;$$\begin{aligned}  &#xA;E[F_N] &amp;= E\left[\frac{1}{N} \sum_{i=1}^N \frac{f(X_i)}{p(X_i)}\right] \\  &#xA;&amp;= \frac{1}{N} \sum_{i=1}^N E\left[\frac{f(X_i)}{p(X_i)}\right] \\  &#xA;&amp;= \frac{1}{N} \sum_{i=1}^N \int_a^b \frac{f(x)}{p(x)} p(x) dx \\  &#xA;&amp;= \int_a^b f(x) dx.  &#xA;\end{aligned}$$&lt;p&gt;Thus, &lt;strong&gt;Monte Carlo integration converges to the true integral&lt;/strong&gt; as $N \to \infty$:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring False Sharing</title>
      <link>https://nothingtosay0031.github.io/post/falsesharing/</link>
      <pubDate>Fri, 03 Jan 2025 11:16:31 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/post/falsesharing/</guid>
      <description>&lt;h1 id=&#34;understanding-false-sharing-a-subtle-performance-killer-in-multithreaded-programs&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#understanding-false-sharing-a-subtle-performance-killer-in-multithreaded-programs&#34;&gt;&lt;/a&gt;&#xD;&#xA;Understanding False Sharing: A Subtle Performance Killer in Multithreaded Programs&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Today, I stumbled upon an intriguing post on Twitter:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;ldquo;If you can tell what&amp;rsquo;s wrong here, you&amp;rsquo;re better than 99.99% of CS grads.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Here’s the code snippet from the post:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;point&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Thread 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Thread 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At first glance, nothing seems amiss—it looks like a straightforward implementation where two threads increment &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; independently.&#xA;But as the Twitter post boldly claimed, just figuring out the issue puts you ahead of 99.99% of CS graduates. Naturally, I couldn&amp;rsquo;t resist diving deeper to see what all the fuss was about!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sampling on the Unit Hemisphere and Disk</title>
      <link>https://nothingtosay0031.github.io/post/sampling/</link>
      <pubDate>Sat, 28 Dec 2024 16:55:53 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/post/sampling/</guid>
      <description>&lt;h1 id=&#34;deriving-pdf-for-hemisphere-sampling&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#deriving-pdf-for-hemisphere-sampling&#34;&gt;&lt;/a&gt;&#xD;&#xA;Deriving PDF for Hemisphere Sampling&#xD;&#xA;&lt;/h1&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Target distribution&lt;/strong&gt; in $\omega$, which is $(x, y, z)$ with $\sqrt{x^2 + y^2 + z^2} = 1$.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;The transformation $T$&lt;/strong&gt; from $(r, \theta, \phi)$ to $(x, y, z)$:&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;$$x = r \sin \theta \cos \phi$$$$y = r \sin \theta \sin \phi$$$$z = r \cos \theta$$&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;The Jacobian&lt;/strong&gt; of the transformation $T$ gives $|J_T| = r^2 \sin \theta$.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;$r = 1$, so we have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real-Time High Quality Rendering</title>
      <link>https://nothingtosay0031.github.io/post/games202/</link>
      <pubDate>Fri, 22 Nov 2024 12:33:58 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/games202/</guid>
      <description>&lt;h1 id=&#34;real-time-shadows&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#real-time-shadows&#34;&gt;&lt;/a&gt;&#xD;&#xA;Real-Time Shadows&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;shadow-mapping&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#shadow-mapping&#34;&gt;&lt;/a&gt;&#xD;&#xA;Shadow Mapping&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;Shadow mapping is an &lt;strong&gt;image-space algorithm&lt;/strong&gt; to determine if a point is in shadow.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;: Does not require scene geometry&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;: Prone to &lt;strong&gt;self-occlusion&lt;/strong&gt; and &lt;strong&gt;aliasing&lt;/strong&gt; issues&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;algorithm-steps&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#algorithm-steps&#34;&gt;&lt;/a&gt;&#xD;&#xA;Algorithm Steps&#xD;&#xA;&lt;/h3&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Generate Depth Map&lt;/strong&gt;: Render the scene from the light’s perspective to create a &lt;strong&gt;depth map (shadow map)&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shadow Check&lt;/strong&gt;: Compare the shading point’s distance to the light with the &lt;strong&gt;shadow map&lt;/strong&gt; depth to decide if the point is in shadow.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;self-occlusion-shadow-acne&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#self-occlusion-shadow-acne&#34;&gt;&lt;/a&gt;&#xD;&#xA;Self-Occlusion (Shadow Acne)&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;Self-occlusion, also known as &lt;a href=&#34;https://digitalrune.github.io/DigitalRune-Documentation/html/3f4d959e-9c98-4a97-8d85-7a73c26145d7.htm&#34;&gt;shadow acne&lt;/a&gt;, happens when &lt;strong&gt;points that should be lit&lt;/strong&gt; are incorrectly shadowed. This often results from limited &lt;strong&gt;depth map resolution&lt;/strong&gt;, which cannot capture detailed depth variations within small areas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shadertoy Projects</title>
      <link>https://nothingtosay0031.github.io/post/shadertoy/</link>
      <pubDate>Fri, 20 Sep 2024 21:01:37 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/shadertoy/</guid>
      <description>&lt;p&gt;Recently, I took part in Arm’s Shadertoy hackathon, where my team won the only Professional Award out of 11 teams. Here, I’ll document the projects I created and experimented with on Shadertoy.&lt;/p&gt;&#xA;&lt;h1 id=&#34;drawing-chinese-characters-with-bézier-curves&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#drawing-chinese-characters-with-b%c3%a9zier-curves&#34;&gt;&lt;/a&gt;&#xD;&#xA;Drawing Chinese Characters with Bézier Curves&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202409202131797.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By utilizing the signed distance field (SDF) of Bézier curves—which include start and end points, start and end thickness, and curvature—we can create smooth, intricate lines. This technique is ideal for drawing the complex strokes of Chinese characters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust Essentials</title>
      <link>https://nothingtosay0031.github.io/post/rust/</link>
      <pubDate>Sun, 15 Sep 2024 20:35:50 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/rust/</guid>
      <description>&lt;h1 id=&#34;memory-management-in-rust---stack-vs-heap&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#memory-management-in-rust---stack-vs-heap&#34;&gt;&lt;/a&gt;&#xD;&#xA;Memory Management in Rust - Stack vs. Heap&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#introduction&#34;&gt;&lt;/a&gt;&#xD;&#xA;Introduction&#xD;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;Rust emphasizes &lt;strong&gt;memory safety&lt;/strong&gt; without garbage collection.&lt;/li&gt;&#xA;&lt;li&gt;This session revisits fundamental concepts like memory, functions, and how data is stored.&lt;/li&gt;&#xA;&lt;li&gt;Many experienced engineers must revisit these basics to solve real-world issues like &lt;strong&gt;concurrent safety&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;key-concepts&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#key-concepts&#34;&gt;&lt;/a&gt;&#xD;&#xA;Key Concepts&#xD;&#xA;&lt;/h2&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Memory in Programming&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Every program interacts with memory, whether &lt;strong&gt;stack&lt;/strong&gt;, &lt;strong&gt;heap&lt;/strong&gt;, or &lt;strong&gt;readonly data segments&lt;/strong&gt; (e.g., &lt;code&gt;.RODATA&lt;/code&gt; for string literals).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interesting Code Snippets</title>
      <link>https://nothingtosay0031.github.io/post/arm/</link>
      <pubDate>Tue, 18 Jun 2024 22:27:03 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/arm/</guid>
      <description>&lt;p&gt;A couple of fun and intriguing C++ code snippets I explored while developing a Vulkan trace tool at ARM.&lt;/p&gt;&#xA;&lt;h1 id=&#34;compile-time-type-to-type-map&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#compile-time-type-to-type-map&#34;&gt;&lt;/a&gt;&#xD;&#xA;Compile-Time Type-to-Type Map&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;While working on translating the Vulkan API into our own data structure, I developed a compile-time type-to-type map. This map allows us to retrieve the corresponding CreateInfo type for a given Vulkan object type. Here’s the implementation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TypeTag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Pair&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FirstType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecondType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_if_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TypeTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecondType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TypeMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FindHelper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Find&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindHelper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Key types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TypeA&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TypeB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Value types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InfoA1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InfoA2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InfoB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Create a TypeMap with types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TypeToInfoMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TypeMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoA1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoA2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Helper to get the type at a specific index in a tuple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleElementType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple_element_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValueA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TypeToInfoMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValueA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InfoA1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoA2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;s&#34;&gt;&amp;#34;Type mismatch!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValueB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TypeToInfoMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypeB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValueB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InfoB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type mismatch!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FirstTypeValueA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple_element_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValueA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstTypeValueA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoA1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type mismatch!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecondTypeValueA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleElementType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValueA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecondTypeValueA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InfoA2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type mismatch!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple_size_v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValueA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Tuple size mismatch!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;easily-ignoring-implicit-conversions&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#easily-ignoring-implicit-conversions&#34;&gt;&lt;/a&gt;&#xD;&#xA;Easily Ignoring Implicit Conversions&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Here&amp;rsquo;s an odd case where passing an lvalue to a function expecting an rvalue doesn&amp;rsquo;t always cause a compiler complaint, depending on how it&amp;rsquo;s used. This snippet illustrates how you might unintentionally bypass this check:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rendering and Game Engine Projects</title>
      <link>https://nothingtosay0031.github.io/post/games/</link>
      <pubDate>Sat, 24 Feb 2024 21:29:00 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/games/</guid>
      <description>&lt;h1 id=&#34;mini-game-engine&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#mini-game-engine&#34;&gt;&lt;/a&gt;&#xD;&#xA;Mini Game Engine&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/NothingToSay0031/GAMES104/&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;color-grading&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#color-grading&#34;&gt;&lt;/a&gt;&#xD;&#xA;Color Grading&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403011741923.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;annimation-and-character-controller&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#annimation-and-character-controller&#34;&gt;&lt;/a&gt;&#xD;&#xA;Annimation and Character Controller&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403011744806.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;reflection&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#reflection&#34;&gt;&lt;/a&gt;&#xD;&#xA;Reflection&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403011745388.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;screen-space-ray-tracing&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#screen-space-ray-tracing&#34;&gt;&lt;/a&gt;&#xD;&#xA;Screen Space Ray Tracing&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Test Reflection&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403070212708.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Sample = 8&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403070216481.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Depth Mipmap&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403130309474.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Sample = 16, with Hi-Z Optimization&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202403070235487.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;shadow-map-pcf-and-pcss&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#shadow-map-pcf-and-pcss&#34;&gt;&lt;/a&gt;&#xD;&#xA;Shadow Map, PCF, and PCSS&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202402251757206.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Geometric Shape Modeling</title>
      <link>https://nothingtosay0031.github.io/post/csci-599/</link>
      <pubDate>Thu, 22 Feb 2024 22:56:51 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/csci-599/</guid>
      <description>&lt;h1 id=&#34;reconstruction&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#reconstruction&#34;&gt;&lt;/a&gt;&#xD;&#xA;Reconstruction&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Implement a simplified version of the method in &amp;ldquo;Poisson Surface Reconstruction&amp;rdquo; by Kazhdan et al. 2006.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202402222342552.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;registration&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#registration&#34;&gt;&lt;/a&gt;&#xD;&#xA;Registration&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Implement a version of the iterative closest point (ICP).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202402222344314.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;smoothing&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#smoothing&#34;&gt;&lt;/a&gt;&#xD;&#xA;Smoothing&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;Smooth a data signal defined over a curved surface.&lt;/p&gt;&#xA;&lt;p&gt;This data could be a scalar field on the surface and smoothing corresponds to data denoising.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NothingToSay0031/Images/main/202402222344633.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Or the data could be the vector field of the surface&amp;rsquo;s own geometry. This corresponds to geometric smoothing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multimedia Systems Design</title>
      <link>https://nothingtosay0031.github.io/post/csci-576/</link>
      <pubDate>Sun, 08 Oct 2023 19:32:01 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/csci-576/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;I especially try to tell students, yeah, grade is something you need to worry about. But after five years when you graduate and you&amp;rsquo;re working in the industry, the grade is not. You&amp;rsquo;re not going to remember the grade. You&amp;rsquo;re going to remember what you learned and how you&amp;rsquo;re applying it.&lt;br&gt;&#xA;——Parag Havaldar&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;anti-aliasing&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#anti-aliasing&#34;&gt;&lt;/a&gt;&#xD;&#xA;Anti-aliasing&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;This assignment covers resampling and filtering for RGB images. The job is to display them using C++ without external libraries (except for WxWidgets).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Development Environment</title>
      <link>https://nothingtosay0031.github.io/post/wsl/</link>
      <pubDate>Sun, 26 Mar 2023 15:04:10 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/wsl/</guid>
      <description>&lt;h1 id=&#34;windows&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#windows&#34;&gt;&lt;/a&gt;&#xD;&#xA;Windows&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;VS Code&lt;/p&gt;&#xA;&lt;p&gt;PowerToys&lt;/p&gt;&#xA;&lt;p&gt;Snipaste&lt;/p&gt;&#xA;&lt;p&gt;PicGo&lt;/p&gt;&#xA;&lt;p&gt;WSL2&lt;/p&gt;&#xA;&lt;p&gt;TeX Live&lt;/p&gt;&#xA;&lt;p&gt;Marktext&lt;/p&gt;&#xA;&lt;h1 id=&#34;windows-subsystem-for-linux&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#windows-subsystem-for-linux&#34;&gt;&lt;/a&gt;&#xD;&#xA;Windows Subsystem for Linux&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;shell&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#shell&#34;&gt;&lt;/a&gt;&#xD;&#xA;Shell&#xD;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;zsh&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#zsh&#34;&gt;&lt;/a&gt;&#xD;&#xA;zsh&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;将zsh作为默认的 Shell 环境 &lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;插件&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/romkatv/powerlevel10k&#34;&gt;powerlevel10k&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34;&gt;zsh-syntax-highlighting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-autosuggestions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-history-substring-search&#34;&gt;zsh-history-substring-search&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;z&lt;/li&gt;&#xA;&lt;li&gt;sudo&lt;/li&gt;&#xA;&lt;li&gt;extract&lt;/li&gt;&#xA;&lt;li&gt;docker&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;配置与-github-连接的-ssh-密钥&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e4%b8%8e-github-%e8%bf%9e%e6%8e%a5%e7%9a%84-ssh-%e5%af%86%e9%92%a5&#34;&gt;&lt;/a&gt;&#xD;&#xA;配置与 GitHub 连接的 SSH 密钥&#xD;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在 WSL 下生成 SSH 公钥 — 私钥对（将邮箱替换为你的邮箱），此时生成的 SSH 密钥默认位于 &lt;code&gt;~/.ssh&lt;/code&gt; 路径下，公钥为 &lt;code&gt;id_rsa.pub&lt;/code&gt;，私钥为 &lt;code&gt;id_rsa&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen -t rsa -b &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;email@ex.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;打开 ssh-agent 使之在后台运行：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将私钥添加到 ssh-agent 之中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Experience of TOEFL and GRE Preparation</title>
      <link>https://nothingtosay0031.github.io/post/tg/</link>
      <pubDate>Sun, 05 Mar 2023 13:17:57 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/tg/</guid>
      <description>&lt;p&gt;8月开始准备托福，9月末准备GRE，托福和GRE分别于12.18和1.5出分。提交的成绩R26L28S23W25，V170Q158AW3，托福拼分105。&lt;/p&gt;&#xA;&lt;p&gt;我英语基础一直都不是很好，来自某不考听力的省份，高考二卷138，四级473，六级390。分享一下基础较差的我是如何备考的，如果能给还在备考的人一些教训和启示就再好不过了。&lt;/p&gt;&#xA;&lt;p&gt;如果需要文中提到的资料，可以直接给我发邮件。&lt;/p&gt;&#xA;&lt;h1 id=&#34;托福&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%89%98%e7%a6%8f&#34;&gt;&lt;/a&gt;&#xD;&#xA;托福&#xD;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;阅读&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%98%85%e8%af%bb&#34;&gt;&lt;/a&gt;&#xD;&#xA;阅读&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;阅读备考期间看了费扬的2016年阅读课和新东方时期的课程，课程内容差不多，推荐看最新的（新东方）就行，做了16年阅读课的作业，背了他给的680个核心词。在9月中旬那会做TPO60左右，大概看题的难易程度，14个题中错0-4的都有，大部分是错1-2个。&lt;/p&gt;&#xA;&lt;p&gt;费扬讲的技巧听了还是蛮受用的，一些句子插入题技巧、细节题的排除技巧都不错，但是根据我考场上的经验，ETS现在阅读出的比TPO还是要长一些，而且有些题并不能直接从逻辑上得出答案，因此还是要求有阅读长难句和分析主干的能力。&lt;/p&gt;&#xA;&lt;p&gt;后期看了一下黎老师的阅读课，在看完GRE闫晨晨和费扬的课程之后技巧上没有新东西，就是有段时间都在练听力，闲着没事看一下避免太生疏。&lt;/p&gt;&#xA;&lt;p&gt;最后考试方法就是：每一段做结构式阅读法，看到题目对应关键词就直接找对应做题就好了，做完也不太管剩下的，直接下一题。托福阅读相比GRE还是简单的，大部分题找到位置就能做对。&lt;/p&gt;&#xA;&lt;p&gt;六选二的选项是按照文章顺序排列的，按行ab cd ef这样排列，刚读完最后一段印象最深，所以我每次都是先从最后一个选项往前开始判断。把明显错误的排除，过于细节的也排除，剩下的听天命。黎老师六选二的排除技巧还不错。&lt;/p&gt;&#xA;&lt;p&gt;我之前词汇题总会错一两个，但是背了网盘里那个&amp;quot;TOEFL 阅读机经词.pdf&amp;quot;就没错过了，高频的基本都覆盖了，不放心的话可以再背&amp;quot;词汇题 1500组.pdf&amp;quot;那个文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;资料实用程度&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%b5%84%e6%96%99%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%a6&#34;&gt;&lt;/a&gt;&#xD;&#xA;资料实用程度&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;词汇题的两个文件 5/5，背了没坏处，如果有词不认识可以背，比学科词好背且有用。&lt;/p&gt;&#xA;&lt;p&gt;费扬阅读课 4/5，如果以前没有接触过阅读方法论的可以尝试，如果基础还不错按照自己的方法来就好。&lt;/p&gt;&#xA;&lt;h3 id=&#34;训练方法&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%ae%ad%e7%bb%83%e6%96%b9%e6%b3%95&#34;&gt;&lt;/a&gt;&#xD;&#xA;训练方法&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;先分题型练习，再限时训练。&lt;/p&gt;&#xA;&lt;h2 id=&#34;听力&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%90%ac%e5%8a%9b&#34;&gt;&lt;/a&gt;&#xD;&#xA;听力&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;听力只听了微臣的课程，陈琦上课一半时间都在推销xs。课程作用没有那么大，方法论也不是很难掌握，主要作用还是带着你做一些题。&lt;/p&gt;&#xA;&lt;p&gt;详细可以看我笔记&amp;quot;听力.md&amp;quot;里的一些内容，记录了网上别处看到的一些常见考点&amp;quot;分类、列举、对比&amp;quot;之类的，感觉比微臣的课还有那么一点用。&lt;/p&gt;&#xA;&lt;p&gt;听力没有什么花里胡哨的方法论，听力的重点会重复，一些难懂的概念也会跟解释，有一处没听懂也可以靠后面理解补救。&lt;/p&gt;&#xA;&lt;p&gt;记笔记这个问题因人而异，我前几次都没记笔记，最后两次记了笔记。不过笔记类似于上课在听lecture的那种笔记。合适自己就行。综合口语和写作一般都要记，因为需要准确复述。&lt;/p&gt;&#xA;&lt;h3 id=&#34;资料实用程度-1&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%b5%84%e6%96%99%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%a6-1&#34;&gt;&lt;/a&gt;&#xD;&#xA;资料实用程度&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;微臣 3/5，如果对他的方法论感兴趣可以听一听。&lt;/p&gt;&#xA;&lt;p&gt;笔记 4/5，推荐了解。&lt;/p&gt;&#xA;&lt;h3 id=&#34;训练方法-1&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%ae%ad%e7%bb%83%e6%96%b9%e6%b3%95-1&#34;&gt;&lt;/a&gt;&#xD;&#xA;训练方法&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;做题，精听（可以加上跟读），有不同的训练方法，参见&amp;quot;听力.md&amp;quot;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;口语&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%8f%a3%e8%af%ad&#34;&gt;&lt;/a&gt;&#xD;&#xA;口语&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;我只看了吴奇的课程，这个东西应该用谁的框架都行，主要还是看自己的基础。&lt;/p&gt;&#xA;&lt;p&gt;吴奇课程还不错，除了废话稍微多了那么一丢丢233。Task1有60个范例，可以熟悉一下或自己回答试试，Task 2 3 4就完全靠吴奇的方法论和模板就好了。&lt;/p&gt;&#xA;&lt;p&gt;我的模板在&amp;quot;口语.md&amp;quot;、&amp;ldquo;背诵.md&amp;quot;这两个文件里可以找到。&lt;/p&gt;&#xA;&lt;p&gt;吴奇课上说想要达到23需要练够一定数量的题，我之前在TPO1-54大概练了15套左右口语，考场上就是17 18 19 20分。&lt;/p&gt;&#xA;&lt;p&gt;在最后一次考试前把TPO55-72的口语全练了，竟然神奇的达到了23分。&lt;/p&gt;&#xA;&lt;h3 id=&#34;资料实用程度-2&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%b5%84%e6%96%99%e5%ae%9e%e7%94%a8%e7%a8%8b%e5%ba%a6-2&#34;&gt;&lt;/a&gt;&#xD;&#xA;资料实用程度&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;吴奇 4/5，课程有点长可以按需看，模板用一用还挺好的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;训练方法-2&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%ae%ad%e7%bb%83%e6%96%b9%e6%b3%95-2&#34;&gt;&lt;/a&gt;&#xD;&#xA;训练方法&#xD;&#xA;&lt;/h3&gt;&lt;p&gt;背/熟悉Task1的回答，吴奇公众号也会更新每次考试的题目。&lt;/p&gt;&#xA;&lt;p&gt;做题，自己说完后去吴奇公众号找他的笔记和范例回答，然后修改一下说流畅。&lt;/p&gt;&#xA;&lt;p&gt;跟读TPO口语材料。&lt;/p&gt;&#xA;&lt;p&gt;个人觉得没必要花钱评分或找外教，本身就是机考，自己录下来自己听就能听得出来说的哪里不行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;写作&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%86%99%e4%bd%9c&#34;&gt;&lt;/a&gt;&#xD;&#xA;写作&#xD;&#xA;&lt;/h2&gt;&lt;p&gt;我最开始看了新东方徐欣的写作课程，说实话我挺后悔的233。不如黎老师的好上手。&lt;/p&gt;&#xA;&lt;p&gt;最初看了黎老师的模板，心想这啥啊这是，然后就去看新东方的课了，最后还是把黎老师的课看完了xs。&lt;/p&gt;&#xA;&lt;p&gt;黎老师的课好就好在她给基础不好的同学一个非常简单的上手思路，从破题到逻辑到语言。不像新东方的那个，课看完了还不知道怎么写。&lt;/p&gt;&#xA;&lt;p&gt;而基础很好的同学则可以超脱这个框架，借鉴破题的思路和句间逻辑，自己设计整体行文逻辑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning and Deep Learning</title>
      <link>https://nothingtosay0031.github.io/post/dl/</link>
      <pubDate>Wed, 01 Feb 2023 12:14:45 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/dl/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/NothingToSay0031/CS_Notes/tree/main/Machine%20Learning%20and%20Deep%20Learning&#34;&gt;Source Documents&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>友情链接</title>
      <link>https://nothingtosay0031.github.io/friend/</link>
      <pubDate>Thu, 09 Jun 2022 20:12:52 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/friend/</guid>
      <description>&lt;h2 id=&#34;小伙伴们&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%b0%8f%e4%bc%99%e4%bc%b4%e4%bb%ac&#34;&gt;&lt;/a&gt;&#xD;&#xA;小伙伴们&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;friend-wrap&#34; data-aos=&#34;zoom-in&#34;&gt;&#xD;&#xA;  &#xD;&#xA;    &lt;div class=&#34;friend-item-wrap&#34;&gt;&#xD;&#xA;      &lt;a href=&#34;https://d-sketon.github.io/&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&#xD;&#xA;      &lt;div class=&#34;friend-icon-wrap&#34;&gt;&#xD;&#xA;        &lt;div class=&#34;friend-icon&#34;&gt;&#xD;&#xA;          &lt;img&#xD;&#xA;            data-src=&#34;https://d-sketon.github.io/avatar/avatar.webp&#34;&#xD;&#xA;            data-sizes=&#34;auto&#34;&#xD;&#xA;            alt=&#34;D-Sketon&#34;&#xD;&#xA;            class=&#34;lazyload&#34;&#xD;&#xA;          /&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;      &lt;/div&gt;&#xD;&#xA;      &lt;div class=&#34;friend-info-wrap&#34;&gt;&#xD;&#xA;        &lt;div class=&#34;friend-name&#34;&gt;&#xD;&#xA;          D-Sketon&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;        &lt;div class=&#34;friend-desc&#34;&gt;&#xD;&#xA;          Hugo 主题开发者&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;      &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>关于</title>
      <link>https://nothingtosay0031.github.io/about/</link>
      <pubDate>Wed, 01 Dec 2021 20:00:52 +0800</pubDate>
      <guid>https://nothingtosay0031.github.io/about/</guid>
      <description>&lt;h1 id=&#34;to-be-continued&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#to-be-continued&#34;&gt;&lt;/a&gt;&#xD;&#xA;To be continued&amp;hellip;&#xD;&#xA;&lt;/h1&gt;&lt;p&gt;这个人很懒，什么都没留下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS Learning Road</title>
      <link>https://nothingtosay0031.github.io/post/cs/</link>
      <pubDate>Wed, 13 Oct 2021 13:09:03 +0000</pubDate>
      <guid>https://nothingtosay0031.github.io/post/cs/</guid>
      <description>&lt;p&gt;记录的&lt;a href=&#34;https://github.com/NothingToSay0031/Notes&#34;&gt;笔记&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;机器学习与深度学习&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0%e4%b8%8e%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0&#34;&gt;&lt;/a&gt;&#xD;&#xA;机器学习与深度学习&#xD;&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;2020.12&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;李宏毅讲的好, 算是正儿八经刷的第一门公开课.&lt;/p&gt;&#xA;&lt;h3 id=&#34;cs61a-structure-and-interpretation-of-computer-programs&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#cs61a-structure-and-interpretation-of-computer-programs&#34;&gt;&lt;/a&gt;&#xD;&#xA;CS61A Structure and Interpretation of Computer Programs&#xD;&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;2021.12&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;CS61A主要介绍不同的抽象方法 (functional programming, data abstraction and object-oriented programming) , 讲授如何利用这些方法解决问题并控制程序的复杂度.&lt;/p&gt;&#xA;&lt;p&gt;课程从基本的语句对环境的影响开始, 逐渐深入到高阶函数, 递归, 数据抽象, 对象等抽象思想, 整体非常连贯. 最后讲了一部分Scheme, Interpreter, Regular Expression, BNF, SQL相关的知识, 内容广泛但不深入.&lt;/p&gt;&#xA;&lt;p&gt;作业难度不是很大, 指导详细 (尤其是Project) , 是优点也是缺点. 题目不会时, 很有可能是题意没有理解清楚.&lt;/p&gt;&#xA;&lt;h3 id=&#34;cs61b-data-structures&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#cs61b-data-structures&#34;&gt;&lt;/a&gt;&#xD;&#xA;CS61B Data Structures&#xD;&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;2022.01.12&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Project Byow和Gitlet不提供基础框架, 更有挑战性.&lt;/p&gt;&#xA;&lt;p&gt;Spring 2018 作业代码量很多. 对于没有多少编程经验的人很有益处.&lt;/p&gt;&#xA;&lt;h3 id=&#34;15-213-introduction-to-computer-systems&#34;&gt;&#xD;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#15-213-introduction-to-computer-systems&#34;&gt;&lt;/a&gt;&#xD;&#xA;15-213 Introduction to Computer Systems&#xD;&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;2022.02.28&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;配套教材Computer Systems: A Programmer&amp;rsquo;s Perspective的&lt;a href=&#34;http://csapp.cs.cmu.edu/3e/labs.html&#34;&gt;Lab&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
